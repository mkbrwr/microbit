// Generated by svd2swift.

import MMIO

/// Universal Asynchronous Receiver/Transmitter
@RegisterBlock
public struct UART0 {
    /// Start UART receiver
    @RegisterBlock(offset: 0x0)
    public var tasks_startrx: Register<TASKS_STARTRX>

    /// Stop UART receiver
    @RegisterBlock(offset: 0x4)
    public var tasks_stoprx: Register<TASKS_STOPRX>

    /// Start UART transmitter
    @RegisterBlock(offset: 0x8)
    public var tasks_starttx: Register<TASKS_STARTTX>

    /// Stop UART transmitter
    @RegisterBlock(offset: 0xc)
    public var tasks_stoptx: Register<TASKS_STOPTX>

    /// Suspend UART
    @RegisterBlock(offset: 0x1c)
    public var tasks_suspend: Register<TASKS_SUSPEND>

    /// CTS is activated (set low). Clear To Send.
    @RegisterBlock(offset: 0x100)
    public var events_cts: Register<EVENTS_CTS>

    /// CTS is deactivated (set high). Not Clear To Send.
    @RegisterBlock(offset: 0x104)
    public var events_ncts: Register<EVENTS_NCTS>

    /// Data received in RXD
    @RegisterBlock(offset: 0x108)
    public var events_rxdrdy: Register<EVENTS_RXDRDY>

    /// Data sent from TXD
    @RegisterBlock(offset: 0x11c)
    public var events_txdrdy: Register<EVENTS_TXDRDY>

    /// Error detected
    @RegisterBlock(offset: 0x124)
    public var events_error: Register<EVENTS_ERROR>

    /// Receiver timeout
    @RegisterBlock(offset: 0x144)
    public var events_rxto: Register<EVENTS_RXTO>

    /// Shortcuts between local events and tasks
    @RegisterBlock(offset: 0x200)
    public var shorts: Register<SHORTS>

    /// Enable interrupt
    @RegisterBlock(offset: 0x304)
    public var intenset: Register<INTENSET>

    /// Disable interrupt
    @RegisterBlock(offset: 0x308)
    public var intenclr: Register<INTENCLR>

    /// Error source
    @RegisterBlock(offset: 0x480)
    public var errorsrc: Register<ERRORSRC>

    /// Enable UART
    @RegisterBlock(offset: 0x500)
    public var enable: Register<ENABLE>

    /// RXD register
    @RegisterBlock(offset: 0x518)
    public var rxd: Register<RXD>

    /// TXD register
    @RegisterBlock(offset: 0x51c)
    public var txd: Register<TXD>

    /// Baud rate. Accuracy depends on the HFCLK source selected.
    @RegisterBlock(offset: 0x524)
    public var baudrate: Register<BAUDRATE>

    /// Configuration of parity and hardware flow control
    @RegisterBlock(offset: 0x56c)
    public var config: Register<CONFIG>

    /// Unspecified
    @RegisterBlock(offset: 0x508)
    public var psel: PSEL
}

extension UART0 {
    /// Start UART receiver
    @Register(bitWidth: 32)
    public struct TASKS_STARTRX {
        /// Start UART receiver
        @WriteOnly(bits: 0..<1, as: TASKS_STARTRX_FIELDValues.self)
        public var tasks_startrx_field: TASKS_STARTRX_FIELD
    }

    /// Stop UART receiver
    @Register(bitWidth: 32)
    public struct TASKS_STOPRX {
        /// Stop UART receiver
        @WriteOnly(bits: 0..<1, as: TASKS_STOPRX_FIELDValues.self)
        public var tasks_stoprx_field: TASKS_STOPRX_FIELD
    }

    /// Start UART transmitter
    @Register(bitWidth: 32)
    public struct TASKS_STARTTX {
        /// Start UART transmitter
        @WriteOnly(bits: 0..<1, as: TASKS_STARTTX_FIELDValues.self)
        public var tasks_starttx_field: TASKS_STARTTX_FIELD
    }

    /// Stop UART transmitter
    @Register(bitWidth: 32)
    public struct TASKS_STOPTX {
        /// Stop UART transmitter
        @WriteOnly(bits: 0..<1, as: TASKS_STOPTX_FIELDValues.self)
        public var tasks_stoptx_field: TASKS_STOPTX_FIELD
    }

    /// Suspend UART
    @Register(bitWidth: 32)
    public struct TASKS_SUSPEND {
        /// Suspend UART
        @WriteOnly(bits: 0..<1, as: TASKS_SUSPEND_FIELDValues.self)
        public var tasks_suspend_field: TASKS_SUSPEND_FIELD
    }

    /// CTS is activated (set low). Clear To Send.
    @Register(bitWidth: 32)
    public struct EVENTS_CTS {
        /// CTS is activated (set low). Clear To Send.
        @ReadWrite(bits: 0..<1, as: EVENTS_CTS_FIELDValues.self)
        public var events_cts_field: EVENTS_CTS_FIELD
    }

    /// CTS is deactivated (set high). Not Clear To Send.
    @Register(bitWidth: 32)
    public struct EVENTS_NCTS {
        /// CTS is deactivated (set high). Not Clear To Send.
        @ReadWrite(bits: 0..<1, as: EVENTS_NCTS_FIELDValues.self)
        public var events_ncts_field: EVENTS_NCTS_FIELD
    }

    /// Data received in RXD
    @Register(bitWidth: 32)
    public struct EVENTS_RXDRDY {
        /// Data received in RXD
        @ReadWrite(bits: 0..<1, as: EVENTS_RXDRDY_FIELDValues.self)
        public var events_rxdrdy_field: EVENTS_RXDRDY_FIELD
    }

    /// Data sent from TXD
    @Register(bitWidth: 32)
    public struct EVENTS_TXDRDY {
        /// Data sent from TXD
        @ReadWrite(bits: 0..<1, as: EVENTS_TXDRDY_FIELDValues.self)
        public var events_txdrdy_field: EVENTS_TXDRDY_FIELD
    }

    /// Error detected
    @Register(bitWidth: 32)
    public struct EVENTS_ERROR {
        /// Error detected
        @ReadWrite(bits: 0..<1, as: EVENTS_ERROR_FIELDValues.self)
        public var events_error_field: EVENTS_ERROR_FIELD
    }

    /// Receiver timeout
    @Register(bitWidth: 32)
    public struct EVENTS_RXTO {
        /// Receiver timeout
        @ReadWrite(bits: 0..<1, as: EVENTS_RXTO_FIELDValues.self)
        public var events_rxto_field: EVENTS_RXTO_FIELD
    }

    /// Shortcuts between local events and tasks
    @Register(bitWidth: 32)
    public struct SHORTS {
        /// Shortcut between event CTS and task STARTRX
        @ReadWrite(bits: 3..<4, as: CTS_STARTRXValues.self)
        public var cts_startrx: CTS_STARTRX

        /// Shortcut between event NCTS and task STOPRX
        @ReadWrite(bits: 4..<5, as: NCTS_STOPRXValues.self)
        public var ncts_stoprx: NCTS_STOPRX
    }

    /// Enable interrupt
    @Register(bitWidth: 32)
    public struct INTENSET {
        /// Write '1' to enable interrupt for event CTS
        @ReadWrite(bits: 0..<1)
        public var cts: CTS

        /// Write '1' to enable interrupt for event NCTS
        @ReadWrite(bits: 1..<2)
        public var ncts: NCTS

        /// Write '1' to enable interrupt for event RXDRDY
        @ReadWrite(bits: 2..<3)
        public var rxdrdy: RXDRDY

        /// Write '1' to enable interrupt for event TXDRDY
        @ReadWrite(bits: 7..<8)
        public var txdrdy: TXDRDY

        /// Write '1' to enable interrupt for event ERROR
        @ReadWrite(bits: 9..<10)
        public var error: ERROR

        /// Write '1' to enable interrupt for event RXTO
        @ReadWrite(bits: 17..<18)
        public var rxto: RXTO
    }

    /// Disable interrupt
    @Register(bitWidth: 32)
    public struct INTENCLR {
        /// Write '1' to disable interrupt for event CTS
        @ReadWrite(bits: 0..<1)
        public var cts: CTS

        /// Write '1' to disable interrupt for event NCTS
        @ReadWrite(bits: 1..<2)
        public var ncts: NCTS

        /// Write '1' to disable interrupt for event RXDRDY
        @ReadWrite(bits: 2..<3)
        public var rxdrdy: RXDRDY

        /// Write '1' to disable interrupt for event TXDRDY
        @ReadWrite(bits: 7..<8)
        public var txdrdy: TXDRDY

        /// Write '1' to disable interrupt for event ERROR
        @ReadWrite(bits: 9..<10)
        public var error: ERROR

        /// Write '1' to disable interrupt for event RXTO
        @ReadWrite(bits: 17..<18)
        public var rxto: RXTO
    }

    /// Error source
    @Register(bitWidth: 32)
    public struct ERRORSRC {
        /// Overrun error
        @ReadWrite(bits: 0..<1)
        public var overrun: OVERRUN

        /// Parity error
        @ReadWrite(bits: 1..<2)
        public var parity: PARITY

        /// Framing error occurred
        @ReadWrite(bits: 2..<3)
        public var framing: FRAMING

        /// Break condition
        @ReadWrite(bits: 3..<4)
        public var `break`: BREAK
    }

    /// Enable UART
    @Register(bitWidth: 32)
    public struct ENABLE {
        /// Enable or disable UART
        @ReadWrite(bits: 0..<4, as: ENABLE_FIELDValues.self)
        public var enable_field: ENABLE_FIELD
    }

    /// RXD register
    @Register(bitWidth: 32)
    public struct RXD {
        /// RX data received in previous transfers, double buffered
        @ReadOnly(bits: 0..<8)
        public var rxd_field: RXD_FIELD
    }

    /// TXD register
    @Register(bitWidth: 32)
    public struct TXD {
        /// TX data to be transferred
        @WriteOnly(bits: 0..<8)
        public var txd_field: TXD_FIELD
    }

    /// Baud rate. Accuracy depends on the HFCLK source selected.
    @Register(bitWidth: 32)
    public struct BAUDRATE {
        /// Baud rate
        @ReadWrite(bits: 0..<32, as: BAUDRATE_FIELDValues.self)
        public var baudrate_field: BAUDRATE_FIELD
    }

    /// Configuration of parity and hardware flow control
    @Register(bitWidth: 32)
    public struct CONFIG {
        /// Hardware flow control
        @ReadWrite(bits: 0..<1, as: HWFCValues.self)
        public var hwfc: HWFC

        /// Parity
        @ReadWrite(bits: 1..<4, as: PARITYValues.self)
        public var parity: PARITY

        /// Stop bits
        @ReadWrite(bits: 4..<5, as: STOPValues.self)
        public var stop: STOP

        /// Even or odd parity type
        @ReadWrite(bits: 8..<9, as: PARITYTYPEValues.self)
        public var paritytype: PARITYTYPE
    }

    /// Unspecified
    @RegisterBlock
    public struct PSEL {
        /// Pin select for RTS
        @RegisterBlock(offset: 0x0)
        public var rts: Register<RTS>

        /// Pin select for TXD
        @RegisterBlock(offset: 0x4)
        public var txd: Register<TXD>

        /// Pin select for CTS
        @RegisterBlock(offset: 0x8)
        public var cts: Register<CTS>

        /// Pin select for RXD
        @RegisterBlock(offset: 0xc)
        public var rxd: Register<RXD>
    }
}

extension UART0.PSEL {
    /// Pin select for RTS
    @Register(bitWidth: 32)
    public struct RTS {
        /// Pin number
        @ReadWrite(bits: 0..<5)
        public var pin: PIN

        /// Port number
        @ReadWrite(bits: 5..<6)
        public var port: PORT

        /// Connection
        @ReadWrite(bits: 31..<32, as: CONNECTValues.self)
        public var connect: CONNECT
    }

    /// Pin select for TXD
    @Register(bitWidth: 32)
    public struct TXD {
        /// Pin number
        @ReadWrite(bits: 0..<5)
        public var pin: PIN

        /// Port number
        @ReadWrite(bits: 5..<6)
        public var port: PORT

        /// Connection
        @ReadWrite(bits: 31..<32, as: CONNECTValues.self)
        public var connect: CONNECT
    }

    /// Pin select for CTS
    @Register(bitWidth: 32)
    public struct CTS {
        /// Pin number
        @ReadWrite(bits: 0..<5)
        public var pin: PIN

        /// Port number
        @ReadWrite(bits: 5..<6)
        public var port: PORT

        /// Connection
        @ReadWrite(bits: 31..<32, as: CONNECTValues.self)
        public var connect: CONNECT
    }

    /// Pin select for RXD
    @Register(bitWidth: 32)
    public struct RXD {
        /// Pin number
        @ReadWrite(bits: 0..<5)
        public var pin: PIN

        /// Port number
        @ReadWrite(bits: 5..<6)
        public var port: PORT

        /// Connection
        @ReadWrite(bits: 31..<32, as: CONNECTValues.self)
        public var connect: CONNECT
    }
}

extension UART0.TASKS_STARTRX {
    public struct TASKS_STARTRX_FIELDValues: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Trigger task
        nonisolated(unsafe) public static let Trigger = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension UART0.TASKS_STOPRX {
    public struct TASKS_STOPRX_FIELDValues: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Trigger task
        nonisolated(unsafe) public static let Trigger = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension UART0.TASKS_STARTTX {
    public struct TASKS_STARTTX_FIELDValues: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Trigger task
        nonisolated(unsafe) public static let Trigger = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension UART0.TASKS_STOPTX {
    public struct TASKS_STOPTX_FIELDValues: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Trigger task
        nonisolated(unsafe) public static let Trigger = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension UART0.TASKS_SUSPEND {
    public struct TASKS_SUSPEND_FIELDValues: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Trigger task
        nonisolated(unsafe) public static let Trigger = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension UART0.EVENTS_CTS {
    public struct EVENTS_CTS_FIELDValues: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Event not generated
        nonisolated(unsafe) public static let NotGenerated = Self(rawValue: 0x0)

        /// Event generated
        nonisolated(unsafe) public static let Generated = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension UART0.EVENTS_NCTS {
    public struct EVENTS_NCTS_FIELDValues: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Event not generated
        nonisolated(unsafe) public static let NotGenerated = Self(rawValue: 0x0)

        /// Event generated
        nonisolated(unsafe) public static let Generated = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension UART0.EVENTS_RXDRDY {
    public struct EVENTS_RXDRDY_FIELDValues: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Event not generated
        nonisolated(unsafe) public static let NotGenerated = Self(rawValue: 0x0)

        /// Event generated
        nonisolated(unsafe) public static let Generated = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension UART0.EVENTS_TXDRDY {
    public struct EVENTS_TXDRDY_FIELDValues: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Event not generated
        nonisolated(unsafe) public static let NotGenerated = Self(rawValue: 0x0)

        /// Event generated
        nonisolated(unsafe) public static let Generated = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension UART0.EVENTS_ERROR {
    public struct EVENTS_ERROR_FIELDValues: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Event not generated
        nonisolated(unsafe) public static let NotGenerated = Self(rawValue: 0x0)

        /// Event generated
        nonisolated(unsafe) public static let Generated = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension UART0.EVENTS_RXTO {
    public struct EVENTS_RXTO_FIELDValues: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Event not generated
        nonisolated(unsafe) public static let NotGenerated = Self(rawValue: 0x0)

        /// Event generated
        nonisolated(unsafe) public static let Generated = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension UART0.SHORTS {
    public struct CTS_STARTRXValues: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Disable shortcut
        nonisolated(unsafe) public static let Disabled = Self(rawValue: 0x0)

        /// Enable shortcut
        nonisolated(unsafe) public static let Enabled = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension UART0.SHORTS {
    public struct NCTS_STOPRXValues: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Disable shortcut
        nonisolated(unsafe) public static let Disabled = Self(rawValue: 0x0)

        /// Enable shortcut
        nonisolated(unsafe) public static let Enabled = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension UART0.ENABLE {
    public struct ENABLE_FIELDValues: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 4

        /// Disable UART
        nonisolated(unsafe) public static let Disabled = Self(rawValue: 0x0)

        /// Enable UART
        nonisolated(unsafe) public static let Enabled = Self(rawValue: 0x4)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension UART0.BAUDRATE {
    public struct BAUDRATE_FIELDValues: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 32

        /// 1200 baud (actual rate: 1205)
        nonisolated(unsafe) public static let Baud1200 = Self(rawValue: 0x4f000)

        /// 2400 baud (actual rate: 2396)
        nonisolated(unsafe) public static let Baud2400 = Self(rawValue: 0x9d000)

        /// 4800 baud (actual rate: 4808)
        nonisolated(unsafe) public static let Baud4800 = Self(rawValue: 0x13b000)

        /// 9600 baud (actual rate: 9598)
        nonisolated(unsafe) public static let Baud9600 = Self(rawValue: 0x275000)

        /// 14400 baud (actual rate: 14414)
        nonisolated(unsafe) public static let Baud14400 = Self(rawValue: 0x3b0000)

        /// 19200 baud (actual rate: 19208)
        nonisolated(unsafe) public static let Baud19200 = Self(rawValue: 0x4ea000)

        /// 28800 baud (actual rate: 28829)
        nonisolated(unsafe) public static let Baud28800 = Self(rawValue: 0x75f000)

        /// 31250 baud
        nonisolated(unsafe) public static let Baud31250 = Self(rawValue: 0x800000)

        /// 38400 baud (actual rate: 38462)
        nonisolated(unsafe) public static let Baud38400 = Self(rawValue: 0x9d5000)

        /// 56000 baud (actual rate: 55944)
        nonisolated(unsafe) public static let Baud56000 = Self(rawValue: 0xe50000)

        /// 57600 baud (actual rate: 57762)
        nonisolated(unsafe) public static let Baud57600 = Self(rawValue: 0xebf000)

        /// 76800 baud (actual rate: 76923)
        nonisolated(unsafe) public static let Baud76800 = Self(rawValue: 0x13a9000)

        /// 115200 baud (actual rate: 115942)
        nonisolated(unsafe) public static let Baud115200 = Self(rawValue: 0x1d7e000)

        /// 230400 baud (actual rate: 231884)
        nonisolated(unsafe) public static let Baud230400 = Self(rawValue: 0x3afb000)

        /// 250000 baud
        nonisolated(unsafe) public static let Baud250000 = Self(rawValue: 0x4000000)

        /// 460800 baud (actual rate: 470588)
        nonisolated(unsafe) public static let Baud460800 = Self(rawValue: 0x75f7000)

        /// 921600 baud (actual rate: 941176)
        nonisolated(unsafe) public static let Baud921600 = Self(rawValue: 0xebed000)

        /// 1Mega baud
        nonisolated(unsafe) public static let Baud1M = Self(rawValue: 0x10000000)

        public var rawValue: UInt32

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension UART0.CONFIG {
    public struct HWFCValues: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Disabled
        nonisolated(unsafe) public static let Disabled = Self(rawValue: 0x0)

        /// Enabled
        nonisolated(unsafe) public static let Enabled = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension UART0.CONFIG {
    public struct PARITYValues: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 3

        /// Exclude parity bit
        nonisolated(unsafe) public static let Excluded = Self(rawValue: 0x0)

        /// Include parity bit
        nonisolated(unsafe) public static let Included = Self(rawValue: 0x7)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension UART0.CONFIG {
    public struct STOPValues: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// One stop bit
        nonisolated(unsafe) public static let One = Self(rawValue: 0x0)

        /// Two stop bits
        nonisolated(unsafe) public static let Two = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension UART0.CONFIG {
    public struct PARITYTYPEValues: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Even parity
        nonisolated(unsafe) public static let Even = Self(rawValue: 0x0)

        /// Odd parity
        nonisolated(unsafe) public static let Odd = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension UART0.PSEL.RTS {
    public struct CONNECTValues: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Disconnect
        nonisolated(unsafe) public static let Disconnected = Self(rawValue: 0x1)

        /// Connect
        nonisolated(unsafe) public static let Connected = Self(rawValue: 0x0)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension UART0.PSEL.TXD {
    public struct CONNECTValues: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Disconnect
        nonisolated(unsafe) public static let Disconnected = Self(rawValue: 0x1)

        /// Connect
        nonisolated(unsafe) public static let Connected = Self(rawValue: 0x0)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension UART0.PSEL.CTS {
    public struct CONNECTValues: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Disconnect
        nonisolated(unsafe) public static let Disconnected = Self(rawValue: 0x1)

        /// Connect
        nonisolated(unsafe) public static let Connected = Self(rawValue: 0x0)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension UART0.PSEL.RXD {
    public struct CONNECTValues: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Disconnect
        nonisolated(unsafe) public static let Disconnected = Self(rawValue: 0x1)

        /// Connect
        nonisolated(unsafe) public static let Connected = Self(rawValue: 0x0)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}
