// Generated by svd2swift.

import MMIO

/// GPIO Port 1
@RegisterBlock
public struct P0 {
    /// Write GPIO port
    @RegisterBlock(offset: 0x504)
    public var out: Register<OUT>

    /// Set individual bits in GPIO port
    @RegisterBlock(offset: 0x508)
    public var outset: Register<OUTSET>

    /// Clear individual bits in GPIO port
    @RegisterBlock(offset: 0x50c)
    public var outclr: Register<OUTCLR>

    /// Read GPIO port
    @RegisterBlock(offset: 0x510)
    public var `in`: Register<IN>

    /// Direction of GPIO pins
    @RegisterBlock(offset: 0x514)
    public var dir: Register<DIR>

    /// DIR set register
    @RegisterBlock(offset: 0x518)
    public var dirset: Register<DIRSET>

    /// DIR clear register
    @RegisterBlock(offset: 0x51c)
    public var dirclr: Register<DIRCLR>

    /// Latch register indicating what GPIO pins that have met the criteria set in the PIN_CNF[n].SENSE registers
    @RegisterBlock(offset: 0x520)
    public var latch: Register<LATCH>

    /// Select between default DETECT signal behavior and LDETECT mode
    @RegisterBlock(offset: 0x524)
    public var detectmode: Register<DETECTMODE>

    /// Description collection: Configuration of GPIO pins
    @RegisterBlock(offset: 0x700, stride: 0x4, count: 32)
    public var pin_cnf: RegisterArray<PIN_CNF>
}

extension P0 {
    /// Write GPIO port
    @Register(bitWidth: 32)
    public struct OUT {
        /// Pin 0
        @ReadWrite(bits: 0..<1, as: PIN0Values.self)
        public var pin0: PIN0

        /// Pin 1
        @ReadWrite(bits: 1..<2, as: PIN1Values.self)
        public var pin1: PIN1

        /// Pin 2
        @ReadWrite(bits: 2..<3, as: PIN2Values.self)
        public var pin2: PIN2

        /// Pin 3
        @ReadWrite(bits: 3..<4, as: PIN3Values.self)
        public var pin3: PIN3

        /// Pin 4
        @ReadWrite(bits: 4..<5, as: PIN4Values.self)
        public var pin4: PIN4

        /// Pin 5
        @ReadWrite(bits: 5..<6, as: PIN5Values.self)
        public var pin5: PIN5

        /// Pin 6
        @ReadWrite(bits: 6..<7, as: PIN6Values.self)
        public var pin6: PIN6

        /// Pin 7
        @ReadWrite(bits: 7..<8, as: PIN7Values.self)
        public var pin7: PIN7

        /// Pin 8
        @ReadWrite(bits: 8..<9, as: PIN8Values.self)
        public var pin8: PIN8

        /// Pin 9
        @ReadWrite(bits: 9..<10, as: PIN9Values.self)
        public var pin9: PIN9

        /// Pin 10
        @ReadWrite(bits: 10..<11, as: PIN10Values.self)
        public var pin10: PIN10

        /// Pin 11
        @ReadWrite(bits: 11..<12, as: PIN11Values.self)
        public var pin11: PIN11

        /// Pin 12
        @ReadWrite(bits: 12..<13, as: PIN12Values.self)
        public var pin12: PIN12

        /// Pin 13
        @ReadWrite(bits: 13..<14, as: PIN13Values.self)
        public var pin13: PIN13

        /// Pin 14
        @ReadWrite(bits: 14..<15, as: PIN14Values.self)
        public var pin14: PIN14

        /// Pin 15
        @ReadWrite(bits: 15..<16, as: PIN15Values.self)
        public var pin15: PIN15

        /// Pin 16
        @ReadWrite(bits: 16..<17, as: PIN16Values.self)
        public var pin16: PIN16

        /// Pin 17
        @ReadWrite(bits: 17..<18, as: PIN17Values.self)
        public var pin17: PIN17

        /// Pin 18
        @ReadWrite(bits: 18..<19, as: PIN18Values.self)
        public var pin18: PIN18

        /// Pin 19
        @ReadWrite(bits: 19..<20, as: PIN19Values.self)
        public var pin19: PIN19

        /// Pin 20
        @ReadWrite(bits: 20..<21, as: PIN20Values.self)
        public var pin20: PIN20

        /// Pin 21
        @ReadWrite(bits: 21..<22, as: PIN21Values.self)
        public var pin21: PIN21

        /// Pin 22
        @ReadWrite(bits: 22..<23, as: PIN22Values.self)
        public var pin22: PIN22

        /// Pin 23
        @ReadWrite(bits: 23..<24, as: PIN23Values.self)
        public var pin23: PIN23

        /// Pin 24
        @ReadWrite(bits: 24..<25, as: PIN24Values.self)
        public var pin24: PIN24

        /// Pin 25
        @ReadWrite(bits: 25..<26, as: PIN25Values.self)
        public var pin25: PIN25

        /// Pin 26
        @ReadWrite(bits: 26..<27, as: PIN26Values.self)
        public var pin26: PIN26

        /// Pin 27
        @ReadWrite(bits: 27..<28, as: PIN27Values.self)
        public var pin27: PIN27

        /// Pin 28
        @ReadWrite(bits: 28..<29, as: PIN28Values.self)
        public var pin28: PIN28

        /// Pin 29
        @ReadWrite(bits: 29..<30, as: PIN29Values.self)
        public var pin29: PIN29

        /// Pin 30
        @ReadWrite(bits: 30..<31, as: PIN30Values.self)
        public var pin30: PIN30

        /// Pin 31
        @ReadWrite(bits: 31..<32, as: PIN31Values.self)
        public var pin31: PIN31
    }

    /// Set individual bits in GPIO port
    @Register(bitWidth: 32)
    public struct OUTSET {
        /// Pin 0
        @ReadWrite(bits: 0..<1)
        public var pin0: PIN0

        /// Pin 1
        @ReadWrite(bits: 1..<2)
        public var pin1: PIN1

        /// Pin 2
        @ReadWrite(bits: 2..<3)
        public var pin2: PIN2

        /// Pin 3
        @ReadWrite(bits: 3..<4)
        public var pin3: PIN3

        /// Pin 4
        @ReadWrite(bits: 4..<5)
        public var pin4: PIN4

        /// Pin 5
        @ReadWrite(bits: 5..<6)
        public var pin5: PIN5

        /// Pin 6
        @ReadWrite(bits: 6..<7)
        public var pin6: PIN6

        /// Pin 7
        @ReadWrite(bits: 7..<8)
        public var pin7: PIN7

        /// Pin 8
        @ReadWrite(bits: 8..<9)
        public var pin8: PIN8

        /// Pin 9
        @ReadWrite(bits: 9..<10)
        public var pin9: PIN9

        /// Pin 10
        @ReadWrite(bits: 10..<11)
        public var pin10: PIN10

        /// Pin 11
        @ReadWrite(bits: 11..<12)
        public var pin11: PIN11

        /// Pin 12
        @ReadWrite(bits: 12..<13)
        public var pin12: PIN12

        /// Pin 13
        @ReadWrite(bits: 13..<14)
        public var pin13: PIN13

        /// Pin 14
        @ReadWrite(bits: 14..<15)
        public var pin14: PIN14

        /// Pin 15
        @ReadWrite(bits: 15..<16)
        public var pin15: PIN15

        /// Pin 16
        @ReadWrite(bits: 16..<17)
        public var pin16: PIN16

        /// Pin 17
        @ReadWrite(bits: 17..<18)
        public var pin17: PIN17

        /// Pin 18
        @ReadWrite(bits: 18..<19)
        public var pin18: PIN18

        /// Pin 19
        @ReadWrite(bits: 19..<20)
        public var pin19: PIN19

        /// Pin 20
        @ReadWrite(bits: 20..<21)
        public var pin20: PIN20

        /// Pin 21
        @ReadWrite(bits: 21..<22)
        public var pin21: PIN21

        /// Pin 22
        @ReadWrite(bits: 22..<23)
        public var pin22: PIN22

        /// Pin 23
        @ReadWrite(bits: 23..<24)
        public var pin23: PIN23

        /// Pin 24
        @ReadWrite(bits: 24..<25)
        public var pin24: PIN24

        /// Pin 25
        @ReadWrite(bits: 25..<26)
        public var pin25: PIN25

        /// Pin 26
        @ReadWrite(bits: 26..<27)
        public var pin26: PIN26

        /// Pin 27
        @ReadWrite(bits: 27..<28)
        public var pin27: PIN27

        /// Pin 28
        @ReadWrite(bits: 28..<29)
        public var pin28: PIN28

        /// Pin 29
        @ReadWrite(bits: 29..<30)
        public var pin29: PIN29

        /// Pin 30
        @ReadWrite(bits: 30..<31)
        public var pin30: PIN30

        /// Pin 31
        @ReadWrite(bits: 31..<32)
        public var pin31: PIN31
    }

    /// Clear individual bits in GPIO port
    @Register(bitWidth: 32)
    public struct OUTCLR {
        /// Pin 0
        @ReadWrite(bits: 0..<1)
        public var pin0: PIN0

        /// Pin 1
        @ReadWrite(bits: 1..<2)
        public var pin1: PIN1

        /// Pin 2
        @ReadWrite(bits: 2..<3)
        public var pin2: PIN2

        /// Pin 3
        @ReadWrite(bits: 3..<4)
        public var pin3: PIN3

        /// Pin 4
        @ReadWrite(bits: 4..<5)
        public var pin4: PIN4

        /// Pin 5
        @ReadWrite(bits: 5..<6)
        public var pin5: PIN5

        /// Pin 6
        @ReadWrite(bits: 6..<7)
        public var pin6: PIN6

        /// Pin 7
        @ReadWrite(bits: 7..<8)
        public var pin7: PIN7

        /// Pin 8
        @ReadWrite(bits: 8..<9)
        public var pin8: PIN8

        /// Pin 9
        @ReadWrite(bits: 9..<10)
        public var pin9: PIN9

        /// Pin 10
        @ReadWrite(bits: 10..<11)
        public var pin10: PIN10

        /// Pin 11
        @ReadWrite(bits: 11..<12)
        public var pin11: PIN11

        /// Pin 12
        @ReadWrite(bits: 12..<13)
        public var pin12: PIN12

        /// Pin 13
        @ReadWrite(bits: 13..<14)
        public var pin13: PIN13

        /// Pin 14
        @ReadWrite(bits: 14..<15)
        public var pin14: PIN14

        /// Pin 15
        @ReadWrite(bits: 15..<16)
        public var pin15: PIN15

        /// Pin 16
        @ReadWrite(bits: 16..<17)
        public var pin16: PIN16

        /// Pin 17
        @ReadWrite(bits: 17..<18)
        public var pin17: PIN17

        /// Pin 18
        @ReadWrite(bits: 18..<19)
        public var pin18: PIN18

        /// Pin 19
        @ReadWrite(bits: 19..<20)
        public var pin19: PIN19

        /// Pin 20
        @ReadWrite(bits: 20..<21)
        public var pin20: PIN20

        /// Pin 21
        @ReadWrite(bits: 21..<22)
        public var pin21: PIN21

        /// Pin 22
        @ReadWrite(bits: 22..<23)
        public var pin22: PIN22

        /// Pin 23
        @ReadWrite(bits: 23..<24)
        public var pin23: PIN23

        /// Pin 24
        @ReadWrite(bits: 24..<25)
        public var pin24: PIN24

        /// Pin 25
        @ReadWrite(bits: 25..<26)
        public var pin25: PIN25

        /// Pin 26
        @ReadWrite(bits: 26..<27)
        public var pin26: PIN26

        /// Pin 27
        @ReadWrite(bits: 27..<28)
        public var pin27: PIN27

        /// Pin 28
        @ReadWrite(bits: 28..<29)
        public var pin28: PIN28

        /// Pin 29
        @ReadWrite(bits: 29..<30)
        public var pin29: PIN29

        /// Pin 30
        @ReadWrite(bits: 30..<31)
        public var pin30: PIN30

        /// Pin 31
        @ReadWrite(bits: 31..<32)
        public var pin31: PIN31
    }

    /// Read GPIO port
    @Register(bitWidth: 32)
    public struct IN {
        /// Pin 0
        @ReadOnly(bits: 0..<1, as: PIN0Values.self)
        public var pin0: PIN0

        /// Pin 1
        @ReadOnly(bits: 1..<2, as: PIN1Values.self)
        public var pin1: PIN1

        /// Pin 2
        @ReadOnly(bits: 2..<3, as: PIN2Values.self)
        public var pin2: PIN2

        /// Pin 3
        @ReadOnly(bits: 3..<4, as: PIN3Values.self)
        public var pin3: PIN3

        /// Pin 4
        @ReadOnly(bits: 4..<5, as: PIN4Values.self)
        public var pin4: PIN4

        /// Pin 5
        @ReadOnly(bits: 5..<6, as: PIN5Values.self)
        public var pin5: PIN5

        /// Pin 6
        @ReadOnly(bits: 6..<7, as: PIN6Values.self)
        public var pin6: PIN6

        /// Pin 7
        @ReadOnly(bits: 7..<8, as: PIN7Values.self)
        public var pin7: PIN7

        /// Pin 8
        @ReadOnly(bits: 8..<9, as: PIN8Values.self)
        public var pin8: PIN8

        /// Pin 9
        @ReadOnly(bits: 9..<10, as: PIN9Values.self)
        public var pin9: PIN9

        /// Pin 10
        @ReadOnly(bits: 10..<11, as: PIN10Values.self)
        public var pin10: PIN10

        /// Pin 11
        @ReadOnly(bits: 11..<12, as: PIN11Values.self)
        public var pin11: PIN11

        /// Pin 12
        @ReadOnly(bits: 12..<13, as: PIN12Values.self)
        public var pin12: PIN12

        /// Pin 13
        @ReadOnly(bits: 13..<14, as: PIN13Values.self)
        public var pin13: PIN13

        /// Pin 14
        @ReadOnly(bits: 14..<15, as: PIN14Values.self)
        public var pin14: PIN14

        /// Pin 15
        @ReadOnly(bits: 15..<16, as: PIN15Values.self)
        public var pin15: PIN15

        /// Pin 16
        @ReadOnly(bits: 16..<17, as: PIN16Values.self)
        public var pin16: PIN16

        /// Pin 17
        @ReadOnly(bits: 17..<18, as: PIN17Values.self)
        public var pin17: PIN17

        /// Pin 18
        @ReadOnly(bits: 18..<19, as: PIN18Values.self)
        public var pin18: PIN18

        /// Pin 19
        @ReadOnly(bits: 19..<20, as: PIN19Values.self)
        public var pin19: PIN19

        /// Pin 20
        @ReadOnly(bits: 20..<21, as: PIN20Values.self)
        public var pin20: PIN20

        /// Pin 21
        @ReadOnly(bits: 21..<22, as: PIN21Values.self)
        public var pin21: PIN21

        /// Pin 22
        @ReadOnly(bits: 22..<23, as: PIN22Values.self)
        public var pin22: PIN22

        /// Pin 23
        @ReadOnly(bits: 23..<24, as: PIN23Values.self)
        public var pin23: PIN23

        /// Pin 24
        @ReadOnly(bits: 24..<25, as: PIN24Values.self)
        public var pin24: PIN24

        /// Pin 25
        @ReadOnly(bits: 25..<26, as: PIN25Values.self)
        public var pin25: PIN25

        /// Pin 26
        @ReadOnly(bits: 26..<27, as: PIN26Values.self)
        public var pin26: PIN26

        /// Pin 27
        @ReadOnly(bits: 27..<28, as: PIN27Values.self)
        public var pin27: PIN27

        /// Pin 28
        @ReadOnly(bits: 28..<29, as: PIN28Values.self)
        public var pin28: PIN28

        /// Pin 29
        @ReadOnly(bits: 29..<30, as: PIN29Values.self)
        public var pin29: PIN29

        /// Pin 30
        @ReadOnly(bits: 30..<31, as: PIN30Values.self)
        public var pin30: PIN30

        /// Pin 31
        @ReadOnly(bits: 31..<32, as: PIN31Values.self)
        public var pin31: PIN31
    }

    /// Direction of GPIO pins
    @Register(bitWidth: 32)
    public struct DIR {
        /// Pin 0
        @ReadWrite(bits: 0..<1, as: PIN0Values.self)
        public var pin0: PIN0

        /// Pin 1
        @ReadWrite(bits: 1..<2, as: PIN1Values.self)
        public var pin1: PIN1

        /// Pin 2
        @ReadWrite(bits: 2..<3, as: PIN2Values.self)
        public var pin2: PIN2

        /// Pin 3
        @ReadWrite(bits: 3..<4, as: PIN3Values.self)
        public var pin3: PIN3

        /// Pin 4
        @ReadWrite(bits: 4..<5, as: PIN4Values.self)
        public var pin4: PIN4

        /// Pin 5
        @ReadWrite(bits: 5..<6, as: PIN5Values.self)
        public var pin5: PIN5

        /// Pin 6
        @ReadWrite(bits: 6..<7, as: PIN6Values.self)
        public var pin6: PIN6

        /// Pin 7
        @ReadWrite(bits: 7..<8, as: PIN7Values.self)
        public var pin7: PIN7

        /// Pin 8
        @ReadWrite(bits: 8..<9, as: PIN8Values.self)
        public var pin8: PIN8

        /// Pin 9
        @ReadWrite(bits: 9..<10, as: PIN9Values.self)
        public var pin9: PIN9

        /// Pin 10
        @ReadWrite(bits: 10..<11, as: PIN10Values.self)
        public var pin10: PIN10

        /// Pin 11
        @ReadWrite(bits: 11..<12, as: PIN11Values.self)
        public var pin11: PIN11

        /// Pin 12
        @ReadWrite(bits: 12..<13, as: PIN12Values.self)
        public var pin12: PIN12

        /// Pin 13
        @ReadWrite(bits: 13..<14, as: PIN13Values.self)
        public var pin13: PIN13

        /// Pin 14
        @ReadWrite(bits: 14..<15, as: PIN14Values.self)
        public var pin14: PIN14

        /// Pin 15
        @ReadWrite(bits: 15..<16, as: PIN15Values.self)
        public var pin15: PIN15

        /// Pin 16
        @ReadWrite(bits: 16..<17, as: PIN16Values.self)
        public var pin16: PIN16

        /// Pin 17
        @ReadWrite(bits: 17..<18, as: PIN17Values.self)
        public var pin17: PIN17

        /// Pin 18
        @ReadWrite(bits: 18..<19, as: PIN18Values.self)
        public var pin18: PIN18

        /// Pin 19
        @ReadWrite(bits: 19..<20, as: PIN19Values.self)
        public var pin19: PIN19

        /// Pin 20
        @ReadWrite(bits: 20..<21, as: PIN20Values.self)
        public var pin20: PIN20

        /// Pin 21
        @ReadWrite(bits: 21..<22, as: PIN21Values.self)
        public var pin21: PIN21

        /// Pin 22
        @ReadWrite(bits: 22..<23, as: PIN22Values.self)
        public var pin22: PIN22

        /// Pin 23
        @ReadWrite(bits: 23..<24, as: PIN23Values.self)
        public var pin23: PIN23

        /// Pin 24
        @ReadWrite(bits: 24..<25, as: PIN24Values.self)
        public var pin24: PIN24

        /// Pin 25
        @ReadWrite(bits: 25..<26, as: PIN25Values.self)
        public var pin25: PIN25

        /// Pin 26
        @ReadWrite(bits: 26..<27, as: PIN26Values.self)
        public var pin26: PIN26

        /// Pin 27
        @ReadWrite(bits: 27..<28, as: PIN27Values.self)
        public var pin27: PIN27

        /// Pin 28
        @ReadWrite(bits: 28..<29, as: PIN28Values.self)
        public var pin28: PIN28

        /// Pin 29
        @ReadWrite(bits: 29..<30, as: PIN29Values.self)
        public var pin29: PIN29

        /// Pin 30
        @ReadWrite(bits: 30..<31, as: PIN30Values.self)
        public var pin30: PIN30

        /// Pin 31
        @ReadWrite(bits: 31..<32, as: PIN31Values.self)
        public var pin31: PIN31
    }

    /// DIR set register
    @Register(bitWidth: 32)
    public struct DIRSET {
        /// Set as output pin 0
        @ReadWrite(bits: 0..<1)
        public var pin0: PIN0

        /// Set as output pin 1
        @ReadWrite(bits: 1..<2)
        public var pin1: PIN1

        /// Set as output pin 2
        @ReadWrite(bits: 2..<3)
        public var pin2: PIN2

        /// Set as output pin 3
        @ReadWrite(bits: 3..<4)
        public var pin3: PIN3

        /// Set as output pin 4
        @ReadWrite(bits: 4..<5)
        public var pin4: PIN4

        /// Set as output pin 5
        @ReadWrite(bits: 5..<6)
        public var pin5: PIN5

        /// Set as output pin 6
        @ReadWrite(bits: 6..<7)
        public var pin6: PIN6

        /// Set as output pin 7
        @ReadWrite(bits: 7..<8)
        public var pin7: PIN7

        /// Set as output pin 8
        @ReadWrite(bits: 8..<9)
        public var pin8: PIN8

        /// Set as output pin 9
        @ReadWrite(bits: 9..<10)
        public var pin9: PIN9

        /// Set as output pin 10
        @ReadWrite(bits: 10..<11)
        public var pin10: PIN10

        /// Set as output pin 11
        @ReadWrite(bits: 11..<12)
        public var pin11: PIN11

        /// Set as output pin 12
        @ReadWrite(bits: 12..<13)
        public var pin12: PIN12

        /// Set as output pin 13
        @ReadWrite(bits: 13..<14)
        public var pin13: PIN13

        /// Set as output pin 14
        @ReadWrite(bits: 14..<15)
        public var pin14: PIN14

        /// Set as output pin 15
        @ReadWrite(bits: 15..<16)
        public var pin15: PIN15

        /// Set as output pin 16
        @ReadWrite(bits: 16..<17)
        public var pin16: PIN16

        /// Set as output pin 17
        @ReadWrite(bits: 17..<18)
        public var pin17: PIN17

        /// Set as output pin 18
        @ReadWrite(bits: 18..<19)
        public var pin18: PIN18

        /// Set as output pin 19
        @ReadWrite(bits: 19..<20)
        public var pin19: PIN19

        /// Set as output pin 20
        @ReadWrite(bits: 20..<21)
        public var pin20: PIN20

        /// Set as output pin 21
        @ReadWrite(bits: 21..<22)
        public var pin21: PIN21

        /// Set as output pin 22
        @ReadWrite(bits: 22..<23)
        public var pin22: PIN22

        /// Set as output pin 23
        @ReadWrite(bits: 23..<24)
        public var pin23: PIN23

        /// Set as output pin 24
        @ReadWrite(bits: 24..<25)
        public var pin24: PIN24

        /// Set as output pin 25
        @ReadWrite(bits: 25..<26)
        public var pin25: PIN25

        /// Set as output pin 26
        @ReadWrite(bits: 26..<27)
        public var pin26: PIN26

        /// Set as output pin 27
        @ReadWrite(bits: 27..<28)
        public var pin27: PIN27

        /// Set as output pin 28
        @ReadWrite(bits: 28..<29)
        public var pin28: PIN28

        /// Set as output pin 29
        @ReadWrite(bits: 29..<30)
        public var pin29: PIN29

        /// Set as output pin 30
        @ReadWrite(bits: 30..<31)
        public var pin30: PIN30

        /// Set as output pin 31
        @ReadWrite(bits: 31..<32)
        public var pin31: PIN31
    }

    /// DIR clear register
    @Register(bitWidth: 32)
    public struct DIRCLR {
        /// Set as input pin 0
        @ReadWrite(bits: 0..<1)
        public var pin0: PIN0

        /// Set as input pin 1
        @ReadWrite(bits: 1..<2)
        public var pin1: PIN1

        /// Set as input pin 2
        @ReadWrite(bits: 2..<3)
        public var pin2: PIN2

        /// Set as input pin 3
        @ReadWrite(bits: 3..<4)
        public var pin3: PIN3

        /// Set as input pin 4
        @ReadWrite(bits: 4..<5)
        public var pin4: PIN4

        /// Set as input pin 5
        @ReadWrite(bits: 5..<6)
        public var pin5: PIN5

        /// Set as input pin 6
        @ReadWrite(bits: 6..<7)
        public var pin6: PIN6

        /// Set as input pin 7
        @ReadWrite(bits: 7..<8)
        public var pin7: PIN7

        /// Set as input pin 8
        @ReadWrite(bits: 8..<9)
        public var pin8: PIN8

        /// Set as input pin 9
        @ReadWrite(bits: 9..<10)
        public var pin9: PIN9

        /// Set as input pin 10
        @ReadWrite(bits: 10..<11)
        public var pin10: PIN10

        /// Set as input pin 11
        @ReadWrite(bits: 11..<12)
        public var pin11: PIN11

        /// Set as input pin 12
        @ReadWrite(bits: 12..<13)
        public var pin12: PIN12

        /// Set as input pin 13
        @ReadWrite(bits: 13..<14)
        public var pin13: PIN13

        /// Set as input pin 14
        @ReadWrite(bits: 14..<15)
        public var pin14: PIN14

        /// Set as input pin 15
        @ReadWrite(bits: 15..<16)
        public var pin15: PIN15

        /// Set as input pin 16
        @ReadWrite(bits: 16..<17)
        public var pin16: PIN16

        /// Set as input pin 17
        @ReadWrite(bits: 17..<18)
        public var pin17: PIN17

        /// Set as input pin 18
        @ReadWrite(bits: 18..<19)
        public var pin18: PIN18

        /// Set as input pin 19
        @ReadWrite(bits: 19..<20)
        public var pin19: PIN19

        /// Set as input pin 20
        @ReadWrite(bits: 20..<21)
        public var pin20: PIN20

        /// Set as input pin 21
        @ReadWrite(bits: 21..<22)
        public var pin21: PIN21

        /// Set as input pin 22
        @ReadWrite(bits: 22..<23)
        public var pin22: PIN22

        /// Set as input pin 23
        @ReadWrite(bits: 23..<24)
        public var pin23: PIN23

        /// Set as input pin 24
        @ReadWrite(bits: 24..<25)
        public var pin24: PIN24

        /// Set as input pin 25
        @ReadWrite(bits: 25..<26)
        public var pin25: PIN25

        /// Set as input pin 26
        @ReadWrite(bits: 26..<27)
        public var pin26: PIN26

        /// Set as input pin 27
        @ReadWrite(bits: 27..<28)
        public var pin27: PIN27

        /// Set as input pin 28
        @ReadWrite(bits: 28..<29)
        public var pin28: PIN28

        /// Set as input pin 29
        @ReadWrite(bits: 29..<30)
        public var pin29: PIN29

        /// Set as input pin 30
        @ReadWrite(bits: 30..<31)
        public var pin30: PIN30

        /// Set as input pin 31
        @ReadWrite(bits: 31..<32)
        public var pin31: PIN31
    }

    /// Latch register indicating what GPIO pins that have met the criteria set in the PIN_CNF[n].SENSE registers
    @Register(bitWidth: 32)
    public struct LATCH {
        /// Status on whether PIN0 has met criteria set in PIN_CNF0.SENSE register. Write '1' to clear.
        @ReadWrite(bits: 0..<1, as: PIN0Values.self)
        public var pin0: PIN0

        /// Status on whether PIN1 has met criteria set in PIN_CNF1.SENSE register. Write '1' to clear.
        @ReadWrite(bits: 1..<2, as: PIN1Values.self)
        public var pin1: PIN1

        /// Status on whether PIN2 has met criteria set in PIN_CNF2.SENSE register. Write '1' to clear.
        @ReadWrite(bits: 2..<3, as: PIN2Values.self)
        public var pin2: PIN2

        /// Status on whether PIN3 has met criteria set in PIN_CNF3.SENSE register. Write '1' to clear.
        @ReadWrite(bits: 3..<4, as: PIN3Values.self)
        public var pin3: PIN3

        /// Status on whether PIN4 has met criteria set in PIN_CNF4.SENSE register. Write '1' to clear.
        @ReadWrite(bits: 4..<5, as: PIN4Values.self)
        public var pin4: PIN4

        /// Status on whether PIN5 has met criteria set in PIN_CNF5.SENSE register. Write '1' to clear.
        @ReadWrite(bits: 5..<6, as: PIN5Values.self)
        public var pin5: PIN5

        /// Status on whether PIN6 has met criteria set in PIN_CNF6.SENSE register. Write '1' to clear.
        @ReadWrite(bits: 6..<7, as: PIN6Values.self)
        public var pin6: PIN6

        /// Status on whether PIN7 has met criteria set in PIN_CNF7.SENSE register. Write '1' to clear.
        @ReadWrite(bits: 7..<8, as: PIN7Values.self)
        public var pin7: PIN7

        /// Status on whether PIN8 has met criteria set in PIN_CNF8.SENSE register. Write '1' to clear.
        @ReadWrite(bits: 8..<9, as: PIN8Values.self)
        public var pin8: PIN8

        /// Status on whether PIN9 has met criteria set in PIN_CNF9.SENSE register. Write '1' to clear.
        @ReadWrite(bits: 9..<10, as: PIN9Values.self)
        public var pin9: PIN9

        /// Status on whether PIN10 has met criteria set in PIN_CNF10.SENSE register. Write '1' to clear.
        @ReadWrite(bits: 10..<11, as: PIN10Values.self)
        public var pin10: PIN10

        /// Status on whether PIN11 has met criteria set in PIN_CNF11.SENSE register. Write '1' to clear.
        @ReadWrite(bits: 11..<12, as: PIN11Values.self)
        public var pin11: PIN11

        /// Status on whether PIN12 has met criteria set in PIN_CNF12.SENSE register. Write '1' to clear.
        @ReadWrite(bits: 12..<13, as: PIN12Values.self)
        public var pin12: PIN12

        /// Status on whether PIN13 has met criteria set in PIN_CNF13.SENSE register. Write '1' to clear.
        @ReadWrite(bits: 13..<14, as: PIN13Values.self)
        public var pin13: PIN13

        /// Status on whether PIN14 has met criteria set in PIN_CNF14.SENSE register. Write '1' to clear.
        @ReadWrite(bits: 14..<15, as: PIN14Values.self)
        public var pin14: PIN14

        /// Status on whether PIN15 has met criteria set in PIN_CNF15.SENSE register. Write '1' to clear.
        @ReadWrite(bits: 15..<16, as: PIN15Values.self)
        public var pin15: PIN15

        /// Status on whether PIN16 has met criteria set in PIN_CNF16.SENSE register. Write '1' to clear.
        @ReadWrite(bits: 16..<17, as: PIN16Values.self)
        public var pin16: PIN16

        /// Status on whether PIN17 has met criteria set in PIN_CNF17.SENSE register. Write '1' to clear.
        @ReadWrite(bits: 17..<18, as: PIN17Values.self)
        public var pin17: PIN17

        /// Status on whether PIN18 has met criteria set in PIN_CNF18.SENSE register. Write '1' to clear.
        @ReadWrite(bits: 18..<19, as: PIN18Values.self)
        public var pin18: PIN18

        /// Status on whether PIN19 has met criteria set in PIN_CNF19.SENSE register. Write '1' to clear.
        @ReadWrite(bits: 19..<20, as: PIN19Values.self)
        public var pin19: PIN19

        /// Status on whether PIN20 has met criteria set in PIN_CNF20.SENSE register. Write '1' to clear.
        @ReadWrite(bits: 20..<21, as: PIN20Values.self)
        public var pin20: PIN20

        /// Status on whether PIN21 has met criteria set in PIN_CNF21.SENSE register. Write '1' to clear.
        @ReadWrite(bits: 21..<22, as: PIN21Values.self)
        public var pin21: PIN21

        /// Status on whether PIN22 has met criteria set in PIN_CNF22.SENSE register. Write '1' to clear.
        @ReadWrite(bits: 22..<23, as: PIN22Values.self)
        public var pin22: PIN22

        /// Status on whether PIN23 has met criteria set in PIN_CNF23.SENSE register. Write '1' to clear.
        @ReadWrite(bits: 23..<24, as: PIN23Values.self)
        public var pin23: PIN23

        /// Status on whether PIN24 has met criteria set in PIN_CNF24.SENSE register. Write '1' to clear.
        @ReadWrite(bits: 24..<25, as: PIN24Values.self)
        public var pin24: PIN24

        /// Status on whether PIN25 has met criteria set in PIN_CNF25.SENSE register. Write '1' to clear.
        @ReadWrite(bits: 25..<26, as: PIN25Values.self)
        public var pin25: PIN25

        /// Status on whether PIN26 has met criteria set in PIN_CNF26.SENSE register. Write '1' to clear.
        @ReadWrite(bits: 26..<27, as: PIN26Values.self)
        public var pin26: PIN26

        /// Status on whether PIN27 has met criteria set in PIN_CNF27.SENSE register. Write '1' to clear.
        @ReadWrite(bits: 27..<28, as: PIN27Values.self)
        public var pin27: PIN27

        /// Status on whether PIN28 has met criteria set in PIN_CNF28.SENSE register. Write '1' to clear.
        @ReadWrite(bits: 28..<29, as: PIN28Values.self)
        public var pin28: PIN28

        /// Status on whether PIN29 has met criteria set in PIN_CNF29.SENSE register. Write '1' to clear.
        @ReadWrite(bits: 29..<30, as: PIN29Values.self)
        public var pin29: PIN29

        /// Status on whether PIN30 has met criteria set in PIN_CNF30.SENSE register. Write '1' to clear.
        @ReadWrite(bits: 30..<31, as: PIN30Values.self)
        public var pin30: PIN30

        /// Status on whether PIN31 has met criteria set in PIN_CNF31.SENSE register. Write '1' to clear.
        @ReadWrite(bits: 31..<32, as: PIN31Values.self)
        public var pin31: PIN31
    }

    /// Select between default DETECT signal behavior and LDETECT mode
    @Register(bitWidth: 32)
    public struct DETECTMODE {
        /// Select between default DETECT signal behavior and LDETECT mode
        @ReadWrite(bits: 0..<1, as: DETECTMODE_FIELDValues.self)
        public var detectmode_field: DETECTMODE_FIELD
    }

    /// Description collection: Configuration of GPIO pins
    @Register(bitWidth: 32)
    public struct PIN_CNF {
        /// Pin direction. Same physical register as DIR register
        @ReadWrite(bits: 0..<1, as: DIRValues.self)
        public var dir: DIR

        /// Connect or disconnect input buffer
        @ReadWrite(bits: 1..<2, as: INPUTValues.self)
        public var input: INPUT

        /// Pull configuration
        @ReadWrite(bits: 2..<4, as: PULLValues.self)
        public var pull: PULL

        /// Drive configuration
        @ReadWrite(bits: 8..<11, as: DRIVEValues.self)
        public var drive: DRIVE

        /// Pin sensing mechanism
        @ReadWrite(bits: 16..<18, as: SENSEValues.self)
        public var sense: SENSE
    }
}

extension P0.OUT {
    public struct PIN0Values: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Pin driver is low
        nonisolated(unsafe) public static let Low = Self(rawValue: 0x0)

        /// Pin driver is high
        nonisolated(unsafe) public static let High = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension P0.OUT {
    public struct PIN1Values: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Pin driver is low
        nonisolated(unsafe) public static let Low = Self(rawValue: 0x0)

        /// Pin driver is high
        nonisolated(unsafe) public static let High = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension P0.OUT {
    public struct PIN2Values: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Pin driver is low
        nonisolated(unsafe) public static let Low = Self(rawValue: 0x0)

        /// Pin driver is high
        nonisolated(unsafe) public static let High = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension P0.OUT {
    public struct PIN3Values: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Pin driver is low
        nonisolated(unsafe) public static let Low = Self(rawValue: 0x0)

        /// Pin driver is high
        nonisolated(unsafe) public static let High = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension P0.OUT {
    public struct PIN4Values: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Pin driver is low
        nonisolated(unsafe) public static let Low = Self(rawValue: 0x0)

        /// Pin driver is high
        nonisolated(unsafe) public static let High = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension P0.OUT {
    public struct PIN5Values: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Pin driver is low
        nonisolated(unsafe) public static let Low = Self(rawValue: 0x0)

        /// Pin driver is high
        nonisolated(unsafe) public static let High = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension P0.OUT {
    public struct PIN6Values: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Pin driver is low
        nonisolated(unsafe) public static let Low = Self(rawValue: 0x0)

        /// Pin driver is high
        nonisolated(unsafe) public static let High = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension P0.OUT {
    public struct PIN7Values: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Pin driver is low
        nonisolated(unsafe) public static let Low = Self(rawValue: 0x0)

        /// Pin driver is high
        nonisolated(unsafe) public static let High = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension P0.OUT {
    public struct PIN8Values: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Pin driver is low
        nonisolated(unsafe) public static let Low = Self(rawValue: 0x0)

        /// Pin driver is high
        nonisolated(unsafe) public static let High = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension P0.OUT {
    public struct PIN9Values: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Pin driver is low
        nonisolated(unsafe) public static let Low = Self(rawValue: 0x0)

        /// Pin driver is high
        nonisolated(unsafe) public static let High = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension P0.OUT {
    public struct PIN10Values: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Pin driver is low
        nonisolated(unsafe) public static let Low = Self(rawValue: 0x0)

        /// Pin driver is high
        nonisolated(unsafe) public static let High = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension P0.OUT {
    public struct PIN11Values: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Pin driver is low
        nonisolated(unsafe) public static let Low = Self(rawValue: 0x0)

        /// Pin driver is high
        nonisolated(unsafe) public static let High = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension P0.OUT {
    public struct PIN12Values: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Pin driver is low
        nonisolated(unsafe) public static let Low = Self(rawValue: 0x0)

        /// Pin driver is high
        nonisolated(unsafe) public static let High = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension P0.OUT {
    public struct PIN13Values: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Pin driver is low
        nonisolated(unsafe) public static let Low = Self(rawValue: 0x0)

        /// Pin driver is high
        nonisolated(unsafe) public static let High = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension P0.OUT {
    public struct PIN14Values: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Pin driver is low
        nonisolated(unsafe) public static let Low = Self(rawValue: 0x0)

        /// Pin driver is high
        nonisolated(unsafe) public static let High = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension P0.OUT {
    public struct PIN15Values: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Pin driver is low
        nonisolated(unsafe) public static let Low = Self(rawValue: 0x0)

        /// Pin driver is high
        nonisolated(unsafe) public static let High = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension P0.OUT {
    public struct PIN16Values: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Pin driver is low
        nonisolated(unsafe) public static let Low = Self(rawValue: 0x0)

        /// Pin driver is high
        nonisolated(unsafe) public static let High = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension P0.OUT {
    public struct PIN17Values: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Pin driver is low
        nonisolated(unsafe) public static let Low = Self(rawValue: 0x0)

        /// Pin driver is high
        nonisolated(unsafe) public static let High = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension P0.OUT {
    public struct PIN18Values: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Pin driver is low
        nonisolated(unsafe) public static let Low = Self(rawValue: 0x0)

        /// Pin driver is high
        nonisolated(unsafe) public static let High = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension P0.OUT {
    public struct PIN19Values: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Pin driver is low
        nonisolated(unsafe) public static let Low = Self(rawValue: 0x0)

        /// Pin driver is high
        nonisolated(unsafe) public static let High = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension P0.OUT {
    public struct PIN20Values: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Pin driver is low
        nonisolated(unsafe) public static let Low = Self(rawValue: 0x0)

        /// Pin driver is high
        nonisolated(unsafe) public static let High = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension P0.OUT {
    public struct PIN21Values: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Pin driver is low
        nonisolated(unsafe) public static let Low = Self(rawValue: 0x0)

        /// Pin driver is high
        nonisolated(unsafe) public static let High = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension P0.OUT {
    public struct PIN22Values: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Pin driver is low
        nonisolated(unsafe) public static let Low = Self(rawValue: 0x0)

        /// Pin driver is high
        nonisolated(unsafe) public static let High = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension P0.OUT {
    public struct PIN23Values: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Pin driver is low
        nonisolated(unsafe) public static let Low = Self(rawValue: 0x0)

        /// Pin driver is high
        nonisolated(unsafe) public static let High = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension P0.OUT {
    public struct PIN24Values: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Pin driver is low
        nonisolated(unsafe) public static let Low = Self(rawValue: 0x0)

        /// Pin driver is high
        nonisolated(unsafe) public static let High = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension P0.OUT {
    public struct PIN25Values: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Pin driver is low
        nonisolated(unsafe) public static let Low = Self(rawValue: 0x0)

        /// Pin driver is high
        nonisolated(unsafe) public static let High = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension P0.OUT {
    public struct PIN26Values: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Pin driver is low
        nonisolated(unsafe) public static let Low = Self(rawValue: 0x0)

        /// Pin driver is high
        nonisolated(unsafe) public static let High = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension P0.OUT {
    public struct PIN27Values: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Pin driver is low
        nonisolated(unsafe) public static let Low = Self(rawValue: 0x0)

        /// Pin driver is high
        nonisolated(unsafe) public static let High = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension P0.OUT {
    public struct PIN28Values: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Pin driver is low
        nonisolated(unsafe) public static let Low = Self(rawValue: 0x0)

        /// Pin driver is high
        nonisolated(unsafe) public static let High = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension P0.OUT {
    public struct PIN29Values: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Pin driver is low
        nonisolated(unsafe) public static let Low = Self(rawValue: 0x0)

        /// Pin driver is high
        nonisolated(unsafe) public static let High = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension P0.OUT {
    public struct PIN30Values: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Pin driver is low
        nonisolated(unsafe) public static let Low = Self(rawValue: 0x0)

        /// Pin driver is high
        nonisolated(unsafe) public static let High = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension P0.OUT {
    public struct PIN31Values: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Pin driver is low
        nonisolated(unsafe) public static let Low = Self(rawValue: 0x0)

        /// Pin driver is high
        nonisolated(unsafe) public static let High = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension P0.IN {
    public struct PIN0Values: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Pin input is low
        nonisolated(unsafe) public static let Low = Self(rawValue: 0x0)

        /// Pin input is high
        nonisolated(unsafe) public static let High = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension P0.IN {
    public struct PIN1Values: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Pin input is low
        nonisolated(unsafe) public static let Low = Self(rawValue: 0x0)

        /// Pin input is high
        nonisolated(unsafe) public static let High = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension P0.IN {
    public struct PIN2Values: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Pin input is low
        nonisolated(unsafe) public static let Low = Self(rawValue: 0x0)

        /// Pin input is high
        nonisolated(unsafe) public static let High = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension P0.IN {
    public struct PIN3Values: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Pin input is low
        nonisolated(unsafe) public static let Low = Self(rawValue: 0x0)

        /// Pin input is high
        nonisolated(unsafe) public static let High = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension P0.IN {
    public struct PIN4Values: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Pin input is low
        nonisolated(unsafe) public static let Low = Self(rawValue: 0x0)

        /// Pin input is high
        nonisolated(unsafe) public static let High = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension P0.IN {
    public struct PIN5Values: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Pin input is low
        nonisolated(unsafe) public static let Low = Self(rawValue: 0x0)

        /// Pin input is high
        nonisolated(unsafe) public static let High = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension P0.IN {
    public struct PIN6Values: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Pin input is low
        nonisolated(unsafe) public static let Low = Self(rawValue: 0x0)

        /// Pin input is high
        nonisolated(unsafe) public static let High = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension P0.IN {
    public struct PIN7Values: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Pin input is low
        nonisolated(unsafe) public static let Low = Self(rawValue: 0x0)

        /// Pin input is high
        nonisolated(unsafe) public static let High = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension P0.IN {
    public struct PIN8Values: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Pin input is low
        nonisolated(unsafe) public static let Low = Self(rawValue: 0x0)

        /// Pin input is high
        nonisolated(unsafe) public static let High = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension P0.IN {
    public struct PIN9Values: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Pin input is low
        nonisolated(unsafe) public static let Low = Self(rawValue: 0x0)

        /// Pin input is high
        nonisolated(unsafe) public static let High = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension P0.IN {
    public struct PIN10Values: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Pin input is low
        nonisolated(unsafe) public static let Low = Self(rawValue: 0x0)

        /// Pin input is high
        nonisolated(unsafe) public static let High = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension P0.IN {
    public struct PIN11Values: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Pin input is low
        nonisolated(unsafe) public static let Low = Self(rawValue: 0x0)

        /// Pin input is high
        nonisolated(unsafe) public static let High = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension P0.IN {
    public struct PIN12Values: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Pin input is low
        nonisolated(unsafe) public static let Low = Self(rawValue: 0x0)

        /// Pin input is high
        nonisolated(unsafe) public static let High = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension P0.IN {
    public struct PIN13Values: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Pin input is low
        nonisolated(unsafe) public static let Low = Self(rawValue: 0x0)

        /// Pin input is high
        nonisolated(unsafe) public static let High = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension P0.IN {
    public struct PIN14Values: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Pin input is low
        nonisolated(unsafe) public static let Low = Self(rawValue: 0x0)

        /// Pin input is high
        nonisolated(unsafe) public static let High = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension P0.IN {
    public struct PIN15Values: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Pin input is low
        nonisolated(unsafe) public static let Low = Self(rawValue: 0x0)

        /// Pin input is high
        nonisolated(unsafe) public static let High = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension P0.IN {
    public struct PIN16Values: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Pin input is low
        nonisolated(unsafe) public static let Low = Self(rawValue: 0x0)

        /// Pin input is high
        nonisolated(unsafe) public static let High = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension P0.IN {
    public struct PIN17Values: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Pin input is low
        nonisolated(unsafe) public static let Low = Self(rawValue: 0x0)

        /// Pin input is high
        nonisolated(unsafe) public static let High = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension P0.IN {
    public struct PIN18Values: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Pin input is low
        nonisolated(unsafe) public static let Low = Self(rawValue: 0x0)

        /// Pin input is high
        nonisolated(unsafe) public static let High = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension P0.IN {
    public struct PIN19Values: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Pin input is low
        nonisolated(unsafe) public static let Low = Self(rawValue: 0x0)

        /// Pin input is high
        nonisolated(unsafe) public static let High = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension P0.IN {
    public struct PIN20Values: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Pin input is low
        nonisolated(unsafe) public static let Low = Self(rawValue: 0x0)

        /// Pin input is high
        nonisolated(unsafe) public static let High = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension P0.IN {
    public struct PIN21Values: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Pin input is low
        nonisolated(unsafe) public static let Low = Self(rawValue: 0x0)

        /// Pin input is high
        nonisolated(unsafe) public static let High = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension P0.IN {
    public struct PIN22Values: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Pin input is low
        nonisolated(unsafe) public static let Low = Self(rawValue: 0x0)

        /// Pin input is high
        nonisolated(unsafe) public static let High = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension P0.IN {
    public struct PIN23Values: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Pin input is low
        nonisolated(unsafe) public static let Low = Self(rawValue: 0x0)

        /// Pin input is high
        nonisolated(unsafe) public static let High = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension P0.IN {
    public struct PIN24Values: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Pin input is low
        nonisolated(unsafe) public static let Low = Self(rawValue: 0x0)

        /// Pin input is high
        nonisolated(unsafe) public static let High = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension P0.IN {
    public struct PIN25Values: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Pin input is low
        nonisolated(unsafe) public static let Low = Self(rawValue: 0x0)

        /// Pin input is high
        nonisolated(unsafe) public static let High = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension P0.IN {
    public struct PIN26Values: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Pin input is low
        nonisolated(unsafe) public static let Low = Self(rawValue: 0x0)

        /// Pin input is high
        nonisolated(unsafe) public static let High = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension P0.IN {
    public struct PIN27Values: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Pin input is low
        nonisolated(unsafe) public static let Low = Self(rawValue: 0x0)

        /// Pin input is high
        nonisolated(unsafe) public static let High = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension P0.IN {
    public struct PIN28Values: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Pin input is low
        nonisolated(unsafe) public static let Low = Self(rawValue: 0x0)

        /// Pin input is high
        nonisolated(unsafe) public static let High = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension P0.IN {
    public struct PIN29Values: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Pin input is low
        nonisolated(unsafe) public static let Low = Self(rawValue: 0x0)

        /// Pin input is high
        nonisolated(unsafe) public static let High = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension P0.IN {
    public struct PIN30Values: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Pin input is low
        nonisolated(unsafe) public static let Low = Self(rawValue: 0x0)

        /// Pin input is high
        nonisolated(unsafe) public static let High = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension P0.IN {
    public struct PIN31Values: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Pin input is low
        nonisolated(unsafe) public static let Low = Self(rawValue: 0x0)

        /// Pin input is high
        nonisolated(unsafe) public static let High = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension P0.DIR {
    public struct PIN0Values: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Pin set as input
        nonisolated(unsafe) public static let Input = Self(rawValue: 0x0)

        /// Pin set as output
        nonisolated(unsafe) public static let Output = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension P0.DIR {
    public struct PIN1Values: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Pin set as input
        nonisolated(unsafe) public static let Input = Self(rawValue: 0x0)

        /// Pin set as output
        nonisolated(unsafe) public static let Output = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension P0.DIR {
    public struct PIN2Values: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Pin set as input
        nonisolated(unsafe) public static let Input = Self(rawValue: 0x0)

        /// Pin set as output
        nonisolated(unsafe) public static let Output = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension P0.DIR {
    public struct PIN3Values: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Pin set as input
        nonisolated(unsafe) public static let Input = Self(rawValue: 0x0)

        /// Pin set as output
        nonisolated(unsafe) public static let Output = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension P0.DIR {
    public struct PIN4Values: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Pin set as input
        nonisolated(unsafe) public static let Input = Self(rawValue: 0x0)

        /// Pin set as output
        nonisolated(unsafe) public static let Output = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension P0.DIR {
    public struct PIN5Values: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Pin set as input
        nonisolated(unsafe) public static let Input = Self(rawValue: 0x0)

        /// Pin set as output
        nonisolated(unsafe) public static let Output = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension P0.DIR {
    public struct PIN6Values: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Pin set as input
        nonisolated(unsafe) public static let Input = Self(rawValue: 0x0)

        /// Pin set as output
        nonisolated(unsafe) public static let Output = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension P0.DIR {
    public struct PIN7Values: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Pin set as input
        nonisolated(unsafe) public static let Input = Self(rawValue: 0x0)

        /// Pin set as output
        nonisolated(unsafe) public static let Output = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension P0.DIR {
    public struct PIN8Values: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Pin set as input
        nonisolated(unsafe) public static let Input = Self(rawValue: 0x0)

        /// Pin set as output
        nonisolated(unsafe) public static let Output = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension P0.DIR {
    public struct PIN9Values: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Pin set as input
        nonisolated(unsafe) public static let Input = Self(rawValue: 0x0)

        /// Pin set as output
        nonisolated(unsafe) public static let Output = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension P0.DIR {
    public struct PIN10Values: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Pin set as input
        nonisolated(unsafe) public static let Input = Self(rawValue: 0x0)

        /// Pin set as output
        nonisolated(unsafe) public static let Output = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension P0.DIR {
    public struct PIN11Values: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Pin set as input
        nonisolated(unsafe) public static let Input = Self(rawValue: 0x0)

        /// Pin set as output
        nonisolated(unsafe) public static let Output = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension P0.DIR {
    public struct PIN12Values: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Pin set as input
        nonisolated(unsafe) public static let Input = Self(rawValue: 0x0)

        /// Pin set as output
        nonisolated(unsafe) public static let Output = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension P0.DIR {
    public struct PIN13Values: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Pin set as input
        nonisolated(unsafe) public static let Input = Self(rawValue: 0x0)

        /// Pin set as output
        nonisolated(unsafe) public static let Output = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension P0.DIR {
    public struct PIN14Values: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Pin set as input
        nonisolated(unsafe) public static let Input = Self(rawValue: 0x0)

        /// Pin set as output
        nonisolated(unsafe) public static let Output = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension P0.DIR {
    public struct PIN15Values: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Pin set as input
        nonisolated(unsafe) public static let Input = Self(rawValue: 0x0)

        /// Pin set as output
        nonisolated(unsafe) public static let Output = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension P0.DIR {
    public struct PIN16Values: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Pin set as input
        nonisolated(unsafe) public static let Input = Self(rawValue: 0x0)

        /// Pin set as output
        nonisolated(unsafe) public static let Output = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension P0.DIR {
    public struct PIN17Values: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Pin set as input
        nonisolated(unsafe) public static let Input = Self(rawValue: 0x0)

        /// Pin set as output
        nonisolated(unsafe) public static let Output = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension P0.DIR {
    public struct PIN18Values: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Pin set as input
        nonisolated(unsafe) public static let Input = Self(rawValue: 0x0)

        /// Pin set as output
        nonisolated(unsafe) public static let Output = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension P0.DIR {
    public struct PIN19Values: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Pin set as input
        nonisolated(unsafe) public static let Input = Self(rawValue: 0x0)

        /// Pin set as output
        nonisolated(unsafe) public static let Output = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension P0.DIR {
    public struct PIN20Values: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Pin set as input
        nonisolated(unsafe) public static let Input = Self(rawValue: 0x0)

        /// Pin set as output
        nonisolated(unsafe) public static let Output = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension P0.DIR {
    public struct PIN21Values: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Pin set as input
        nonisolated(unsafe) public static let Input = Self(rawValue: 0x0)

        /// Pin set as output
        nonisolated(unsafe) public static let Output = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension P0.DIR {
    public struct PIN22Values: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Pin set as input
        nonisolated(unsafe) public static let Input = Self(rawValue: 0x0)

        /// Pin set as output
        nonisolated(unsafe) public static let Output = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension P0.DIR {
    public struct PIN23Values: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Pin set as input
        nonisolated(unsafe) public static let Input = Self(rawValue: 0x0)

        /// Pin set as output
        nonisolated(unsafe) public static let Output = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension P0.DIR {
    public struct PIN24Values: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Pin set as input
        nonisolated(unsafe) public static let Input = Self(rawValue: 0x0)

        /// Pin set as output
        nonisolated(unsafe) public static let Output = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension P0.DIR {
    public struct PIN25Values: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Pin set as input
        nonisolated(unsafe) public static let Input = Self(rawValue: 0x0)

        /// Pin set as output
        nonisolated(unsafe) public static let Output = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension P0.DIR {
    public struct PIN26Values: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Pin set as input
        nonisolated(unsafe) public static let Input = Self(rawValue: 0x0)

        /// Pin set as output
        nonisolated(unsafe) public static let Output = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension P0.DIR {
    public struct PIN27Values: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Pin set as input
        nonisolated(unsafe) public static let Input = Self(rawValue: 0x0)

        /// Pin set as output
        nonisolated(unsafe) public static let Output = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension P0.DIR {
    public struct PIN28Values: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Pin set as input
        nonisolated(unsafe) public static let Input = Self(rawValue: 0x0)

        /// Pin set as output
        nonisolated(unsafe) public static let Output = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension P0.DIR {
    public struct PIN29Values: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Pin set as input
        nonisolated(unsafe) public static let Input = Self(rawValue: 0x0)

        /// Pin set as output
        nonisolated(unsafe) public static let Output = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension P0.DIR {
    public struct PIN30Values: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Pin set as input
        nonisolated(unsafe) public static let Input = Self(rawValue: 0x0)

        /// Pin set as output
        nonisolated(unsafe) public static let Output = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension P0.DIR {
    public struct PIN31Values: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Pin set as input
        nonisolated(unsafe) public static let Input = Self(rawValue: 0x0)

        /// Pin set as output
        nonisolated(unsafe) public static let Output = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension P0.LATCH {
    public struct PIN0Values: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Criteria has not been met
        nonisolated(unsafe)  public static let NotLatched = Self(rawValue: 0x0)

        /// Criteria has been met
        nonisolated(unsafe)  public static let Latched = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension P0.LATCH {
    public struct PIN1Values: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Criteria has not been met
        nonisolated(unsafe)  public static let NotLatched = Self(rawValue: 0x0)

        /// Criteria has been met
        nonisolated(unsafe)  public static let Latched = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension P0.LATCH {
    public struct PIN2Values: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Criteria has not been met
        nonisolated(unsafe)  public static let NotLatched = Self(rawValue: 0x0)

        /// Criteria has been met
        nonisolated(unsafe)  public static let Latched = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension P0.LATCH {
    public struct PIN3Values: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Criteria has not been met
        nonisolated(unsafe)  public static let NotLatched = Self(rawValue: 0x0)

        /// Criteria has been met
        nonisolated(unsafe)  public static let Latched = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension P0.LATCH {
    public struct PIN4Values: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Criteria has not been met
        nonisolated(unsafe)  public static let NotLatched = Self(rawValue: 0x0)

        /// Criteria has been met
        nonisolated(unsafe)  public static let Latched = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension P0.LATCH {
    public struct PIN5Values: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Criteria has not been met
        nonisolated(unsafe)  public static let NotLatched = Self(rawValue: 0x0)

        /// Criteria has been met
        nonisolated(unsafe)  public static let Latched = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension P0.LATCH {
    public struct PIN6Values: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Criteria has not been met
        nonisolated(unsafe)  public static let NotLatched = Self(rawValue: 0x0)

        /// Criteria has been met
        nonisolated(unsafe)  public static let Latched = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension P0.LATCH {
    public struct PIN7Values: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Criteria has not been met
        nonisolated(unsafe)  public static let NotLatched = Self(rawValue: 0x0)

        /// Criteria has been met
        nonisolated(unsafe)  public static let Latched = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension P0.LATCH {
    public struct PIN8Values: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Criteria has not been met
        nonisolated(unsafe)  public static let NotLatched = Self(rawValue: 0x0)

        /// Criteria has been met
        nonisolated(unsafe)  public static let Latched = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension P0.LATCH {
    public struct PIN9Values: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Criteria has not been met
        nonisolated(unsafe)  public static let NotLatched = Self(rawValue: 0x0)

        /// Criteria has been met
        nonisolated(unsafe)  public static let Latched = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension P0.LATCH {
    public struct PIN10Values: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Criteria has not been met
        nonisolated(unsafe)  public static let NotLatched = Self(rawValue: 0x0)

        /// Criteria has been met
        nonisolated(unsafe)  public static let Latched = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension P0.LATCH {
    public struct PIN11Values: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Criteria has not been met
        nonisolated(unsafe)  public static let NotLatched = Self(rawValue: 0x0)

        /// Criteria has been met
        nonisolated(unsafe)  public static let Latched = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension P0.LATCH {
    public struct PIN12Values: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Criteria has not been met
        nonisolated(unsafe)  public static let NotLatched = Self(rawValue: 0x0)

        /// Criteria has been met
        nonisolated(unsafe)  public static let Latched = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension P0.LATCH {
    public struct PIN13Values: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Criteria has not been met
        nonisolated(unsafe)  public static let NotLatched = Self(rawValue: 0x0)

        /// Criteria has been met
        nonisolated(unsafe)  public static let Latched = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension P0.LATCH {
    public struct PIN14Values: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Criteria has not been met
        nonisolated(unsafe)  public static let NotLatched = Self(rawValue: 0x0)

        /// Criteria has been met
        nonisolated(unsafe)  public static let Latched = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension P0.LATCH {
    public struct PIN15Values: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Criteria has not been met
        nonisolated(unsafe)  public static let NotLatched = Self(rawValue: 0x0)

        /// Criteria has been met
        nonisolated(unsafe)  public static let Latched = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension P0.LATCH {
    public struct PIN16Values: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Criteria has not been met
        nonisolated(unsafe)  public static let NotLatched = Self(rawValue: 0x0)

        /// Criteria has been met
        nonisolated(unsafe)  public static let Latched = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension P0.LATCH {
    public struct PIN17Values: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Criteria has not been met
        nonisolated(unsafe)  public static let NotLatched = Self(rawValue: 0x0)

        /// Criteria has been met
        nonisolated(unsafe)  public static let Latched = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension P0.LATCH {
    public struct PIN18Values: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Criteria has not been met
        nonisolated(unsafe)  public static let NotLatched = Self(rawValue: 0x0)

        /// Criteria has been met
        nonisolated(unsafe)  public static let Latched = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension P0.LATCH {
    public struct PIN19Values: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Criteria has not been met
        nonisolated(unsafe)  public static let NotLatched = Self(rawValue: 0x0)

        /// Criteria has been met
        nonisolated(unsafe)  public static let Latched = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension P0.LATCH {
    public struct PIN20Values: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Criteria has not been met
        nonisolated(unsafe)  public static let NotLatched = Self(rawValue: 0x0)

        /// Criteria has been met
        nonisolated(unsafe)  public static let Latched = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension P0.LATCH {
    public struct PIN21Values: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Criteria has not been met
        nonisolated(unsafe)  public static let NotLatched = Self(rawValue: 0x0)

        /// Criteria has been met
        nonisolated(unsafe)  public static let Latched = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension P0.LATCH {
    public struct PIN22Values: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Criteria has not been met
        nonisolated(unsafe)  public static let NotLatched = Self(rawValue: 0x0)

        /// Criteria has been met
        nonisolated(unsafe)  public static let Latched = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension P0.LATCH {
    public struct PIN23Values: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Criteria has not been met
        nonisolated(unsafe)  public static let NotLatched = Self(rawValue: 0x0)

        /// Criteria has been met
        nonisolated(unsafe)  public static let Latched = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension P0.LATCH {
    public struct PIN24Values: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Criteria has not been met
        nonisolated(unsafe)  public static let NotLatched = Self(rawValue: 0x0)

        /// Criteria has been met
        nonisolated(unsafe)  public static let Latched = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension P0.LATCH {
    public struct PIN25Values: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Criteria has not been met
        nonisolated(unsafe)  public static let NotLatched = Self(rawValue: 0x0)

        /// Criteria has been met
        nonisolated(unsafe)  public static let Latched = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension P0.LATCH {
    public struct PIN26Values: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Criteria has not been met
        nonisolated(unsafe)  public static let NotLatched = Self(rawValue: 0x0)

        /// Criteria has been met
        nonisolated(unsafe)  public static let Latched = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension P0.LATCH {
    public struct PIN27Values: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Criteria has not been met
        nonisolated(unsafe)  public static let NotLatched = Self(rawValue: 0x0)

        /// Criteria has been met
        nonisolated(unsafe)  public static let Latched = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension P0.LATCH {
    public struct PIN28Values: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Criteria has not been met
        nonisolated(unsafe)  public static let NotLatched = Self(rawValue: 0x0)

        /// Criteria has been met
        nonisolated(unsafe)  public static let Latched = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension P0.LATCH {
    public struct PIN29Values: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Criteria has not been met
        nonisolated(unsafe)  public static let NotLatched = Self(rawValue: 0x0)

        /// Criteria has been met
        nonisolated(unsafe)  public static let Latched = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension P0.LATCH {
    public struct PIN30Values: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Criteria has not been met
        nonisolated(unsafe)  public static let NotLatched = Self(rawValue: 0x0)

        /// Criteria has been met
        nonisolated(unsafe)  public static let Latched = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension P0.LATCH {
    public struct PIN31Values: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Criteria has not been met
        nonisolated(unsafe)  public static let NotLatched = Self(rawValue: 0x0)

        /// Criteria has been met
        nonisolated(unsafe)  public static let Latched = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension P0.DETECTMODE {
    public struct DETECTMODE_FIELDValues: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// DETECT directly connected to PIN DETECT signals
        nonisolated(unsafe)  public static let Default = Self(rawValue: 0x0)

        /// Use the latched LDETECT behavior
        nonisolated(unsafe)  public static let LDETECT = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension P0.PIN_CNF {
    public struct DIRValues: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Configure pin as an input pin
        nonisolated(unsafe) public static let Input = Self(rawValue: 0x0)

        /// Configure pin as an output pin
        nonisolated(unsafe) public static let Output = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension P0.PIN_CNF {
    public struct INPUTValues: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 1

        /// Connect input buffer
        nonisolated(unsafe) public static let Connect = Self(rawValue: 0x0)

        /// Disconnect input buffer
        nonisolated(unsafe) public static let Disconnect = Self(rawValue: 0x1)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension P0.PIN_CNF {
    public struct PULLValues: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 2

        /// No pull
        nonisolated(unsafe) public static let Disabled = Self(rawValue: 0x0)

        /// Pull down on pin
        nonisolated(unsafe) public static let Pulldown = Self(rawValue: 0x1)

        /// Pull up on pin
        nonisolated(unsafe) public static let Pullup = Self(rawValue: 0x3)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension P0.PIN_CNF {
    public struct DRIVEValues: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 3

        /// Standard '0', standard '1'
        nonisolated(unsafe) public static let S0S1 = Self(rawValue: 0x0)

        /// High drive '0', standard '1'
        nonisolated(unsafe) public static let H0S1 = Self(rawValue: 0x1)

        /// Standard '0', high drive '1'
        nonisolated(unsafe) public static let S0H1 = Self(rawValue: 0x2)

        /// High drive '0', high 'drive '1''
        nonisolated(unsafe) public static let H0H1 = Self(rawValue: 0x3)

        /// Disconnect '0' standard '1' (normally used for wired-or connections)
        nonisolated(unsafe) public static let D0S1 = Self(rawValue: 0x4)

        /// Disconnect '0', high drive '1' (normally used for wired-or connections)
        nonisolated(unsafe) public static let D0H1 = Self(rawValue: 0x5)

        /// Standard '0'. disconnect '1' (normally used for wired-and connections)
        nonisolated(unsafe) public static let S0D1 = Self(rawValue: 0x6)

        /// High drive '0', disconnect '1' (normally used for wired-and connections)
        nonisolated(unsafe) public static let H0D1 = Self(rawValue: 0x7)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}

extension P0.PIN_CNF {
    public struct SENSEValues: BitFieldProjectable, RawRepresentable {
        public static let bitWidth = 2

        /// Disabled
        nonisolated(unsafe) public static let Disabled = Self(rawValue: 0x0)

        /// Sense for high level
        nonisolated(unsafe) public static let High = Self(rawValue: 0x2)

        /// Sense for low level
        nonisolated(unsafe) public static let Low = Self(rawValue: 0x3)

        public var rawValue: UInt8

        @inlinable @inline(__always)
        public init(rawValue: Self.RawValue) {
            self.rawValue = rawValue
        }
    }
}
